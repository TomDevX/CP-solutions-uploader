// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  username          String    @unique
  passwordHash      String?
  googleId          String?   @unique
  role              UserRole  @default(USER)
  isAnonymousAllowed Boolean  @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  solutions         Solution[]
  reactions         Reaction[]
  drafts            Draft[]
  attachments       Attachment[]

  @@map("users")
}

model Solution {
  id              String    @id @default(cuid())
  problemCode     String    // e.g., "148A", "CF-148A"
  title           String
  contentMarkdown String
  contentHtml     String
  problemLink     String?   // URL to the problem
  submissionLink  String?   // URL to the submission
  editorial       String?   // LaTeX-enabled editorial
  authorId        String?
  isPublic        Boolean   @default(false)
  isAnonymous     Boolean   @default(false)
  isDraft         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  author          User?       @relation(fields: [authorId], references: [id], onDelete: SetNull)
  reactions       Reaction[]
  attachments     Attachment[]

  @@map("solutions")
}

model Reaction {
  id         String       @id @default(cuid())
  solutionId String
  userId     String
  type       ReactionType
  createdAt  DateTime     @default(now())

  // Relations
  solution   Solution     @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([solutionId, userId, type])
  @@map("reactions")
}

model Attachment {
  id           String   @id @default(cuid())
  solutionId   String
  filename     String
  storagePath  String
  createdAt    DateTime @default(now())

  // Relations
  solution     Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@map("attachments")
}

model Draft {
  id           String   @id @default(cuid())
  userId       String
  solutionId   String?
  content      String
  lastSavedAt  DateTime @default(now())

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("drafts")
}

enum UserRole {
  USER
  ADMIN
}

enum ReactionType {
  LIKE
  HELPFUL
  BOOKMARK
}
